type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    import server.JSONDatabase;

    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            String input;
            JSONDatabase jsons = new JSONDatabase();
            while (!"exit".equals(input = scanner.nextLine())) {
                String [] line = input.split(" ");
                if ("get".equals(line[0])) {
                    jsons.get(Integer.parseInt(line[1]));
                } else if (line[0].equals("set")) {
                    jsons.set(Integer.parseInt(line[1]), line[2]);
                } else if (line[0].equals("delete")) {
                    jsons.delete(Integer.parseInt(line[1]));
                }
            }
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            String input;
            JSONDatabase jsons = new JSONDatabase();
            while (!"exit".equals(input = scanner.nextLine())) {
                String[] line = input.split(" ");
                if ("get".equals(line[0])) {
                    System.out.println(jsons.get(Integer.parseInt(line[1])));
                } else if (line[0].equals("set")) {
                    StringBuilder str = new StringBuilder();
                    for (int i = 2; i < line.length; i++) {
                        str.append(line[i]).append(" ");
                    }
                    jsons.set(Integer.parseInt(line[1]), str.toString());
                } else if (line[0].equals("delete")) {
                    jsons.delete(Integer.parseInt(line[1]));
                }
            }
        }
    }
  learner_created: false
- name: src/server/JSONDatabase.java
  visible: true
  text: |
    package server;

    import java.util.ArrayList;
    import java.util.HashMap;
    import java.util.List;
    import java.util.Map;

    /**
     * @author namvdo
     */
    public class JSONDatabase {
        private final Map<Integer, String> jsons = new HashMap<>(100);

        public String get(int number) {
            if (jsons.get(number) == null) return "ERROR";
            return jsons.get(number);
        }

        public void set(int number, String value) {
            if (number < Setup.START || number > Setup.END) {
                System.out.println("ERROR");
            } else {
                jsons.put(number, value);
                System.out.println("OK");
            }
        }

        public void delete(int number) {
            if (number < Setup.START || number > Setup.END) {
                System.out.println("ERROR");
            } else {
                if (!"".equals(jsons.get(number))) {
                    jsons.remove(number);
                }
                System.out.println("OK");
            }
        }
    }
  learner_created: false
- name: src/server/Setup.java
  visible: true
  text: |
    package server;

    public class Setup {
        public static final int START = 1;
        public static final int END = 100;
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String CORRECT_SERVER_OUTPUT =
            "Server started!\n" +
                "Received: Give me a record # N\n" +
                "Sent: A record # N was sent!";

        private static final String CORRECT_CLIENT_OUTPUT =
            "Client started!\n" +
                "Sent: Give me a record # N\n" +
                "Received: A record # N was sent!";

        @DynamicTestingMethod
        CheckResult test() throws InterruptedException {

            TestedProgram server = new TestedProgram(server.Main.class);
            server.startInBackground();
            Thread.sleep(500);

            String serverOutput = server.getOutput().trim();

            if (!serverOutput.trim().equals("Server started!")) {
                return CheckResult.wrong("Server output should be 'Server started!' until a client connects!");
            }

            TestedProgram client = new TestedProgram(client.Main.class);

            String clientOutput = client.start();
            serverOutput += "\n" + server.getOutput();

            String[] serverOutputLines = serverOutput.split("\n");

            if (serverOutputLines.length != 3) {
                return CheckResult.wrong("After the client connects to the server, the server output should contain 3 lines!");
            }

            String serverOutputLastLine = serverOutputLines[serverOutputLines.length - 1];

            if (!serverOutputLastLine.contains("Sent: A record #") || !serverOutputLastLine.contains("was sent!")) {
                return CheckResult.wrong("Server output after client connects to the server should be:\n"
                    + CORRECT_SERVER_OUTPUT + "\n\nWhere N is some number.\n\nYour output:\n" + serverOutput);
            }

            String[] clientOutputLines = clientOutput.split("\n");

            if (clientOutputLines.length != 3) {
                return CheckResult.wrong("After the client connects to the server, the client output should contain 3 lines!");
            }

            String clientOutputLastLine = clientOutputLines[clientOutputLines.length - 1];

            if (!clientOutputLastLine.contains("Received: A record #") || !clientOutputLastLine.contains("was sent!")) {
                return CheckResult.wrong("Client output after client connects to the server should be:\n"
                    + CORRECT_CLIENT_OUTPUT + "\n\nWhere N is some number.\n\nYour output:\n" + clientOutput);
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/65/stages/349/implement
status: Solved
record: 1
